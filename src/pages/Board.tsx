import { useState, useEffect, useMemo } from 'react'
import { Heart, X, ChevronDown, ChevronUp, Edit, Trash2, User } from 'lucide-react'
import ConfirmModal from '../features/common/ConfirmModal'
import NicknameEditModal from '../features/common/NicknameEditModal'
import { createPost, deletePost, togglePostLike, getPostLikes, updatePost } from '../libs/api/posts'
import { fetchGroupPosts, fetchPost, fetchPostLikesCount, fetchPostLikeStatus } from '../services/posts'
import { getCurrentGroupId, fetchGroupMembers, updateMyGroupMemberInfo } from '../libs/api/groups'
import { getCurrentMemberId, getCurrentUser, getAccessToken } from '../libs/utils/auth'
import { useAuth } from '../libs/hooks/useAuth'
import { getProfile } from '../libs/api/profile'
import type { BoardPost, BoardPostDetail, PageResponse, BoardColor, PostLikeResponse } from '../types/main'

type TabKey = 'FREE' | 'ANNOUNCEMENT'

export default function Board() {
  const [userName, setUserName] = useState('')
  const { permissions } = useAuth()
  const [currentPage, setCurrentPage] = useState(1)
  const [selectedPost, setSelectedPost] = useState<BoardPostDetail | null>(null)
  const [activeTab, setActiveTab] = useState<TabKey>('ANNOUNCEMENT')
  const [showLikeUsers, setShowLikeUsers] = useState(false)
  const [showNewPostModal, setShowNewPostModal] = useState(false)
  const [showEditPostModal, setShowEditPostModal] = useState(false)
  const [newPostTitle, setNewPostTitle] = useState('')
  const [newPostContent, setNewPostContent] = useState('')
  const [editPostTitle, setEditPostTitle] = useState('')
  const [editPostContent, setEditPostContent] = useState('')
  const [editPostCategory, setEditPostCategory] = useState<'ANNOUNCEMENT' | 'FREE'>('FREE')
  const [editPostColor, setEditPostColor] = useState<BoardColor>('BLUE')
  const [showConfirm, setShowConfirm] = useState(false)
  const [pendingDeleteId, setPendingDeleteId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isEditing, setIsEditing] = useState(false)
  const [newPostCategory, setNewPostCategory] = useState<'ANNOUNCEMENT' | 'FREE'>('FREE')
  const [newPostColor, setNewPostColor] = useState<BoardColor>('BLUE')
  const [searchTerm, setSearchTerm] = useState('')
  const [showErrorModal, setShowErrorModal] = useState(false)
  const [errorMessage, setErrorMessage] = useState('')
  
  // ÎãâÎÑ§ÏûÑ ÏàòÏ†ï Í¥ÄÎ†® ÏÉÅÌÉú
  const [showNicknameModal, setShowNicknameModal] = useState(false)
  const [currentNickname, setCurrentNickname] = useState('')
  const [isUpdatingNickname, setIsUpdatingNickname] = useState(false)
  const [myGroupMemberInfo, setMyGroupMemberInfo] = useState<any>(null)

  // API ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [pageData, setPageData] = useState<PageResponse<BoardPost> | null>(null)
  const [modalLoading, setModalLoading] = useState(false)
  const [modalData, setModalData] = useState<{ 
    post: BoardPostDetail; 
    likeCount: number; 
    isLiked: boolean;
    likeUsers: PostLikeResponse | null;
  } | null>(null)
  const [postLikeCounts, setPostLikeCounts] = useState<Record<number, number>>({})

  // ÎèôÏ†ÅÏúºÎ°ú Í∑∏Î£π IDÎ•º Í∞ÄÏ†∏Ïò§Í∏∞ ÏúÑÌïú ÏÉÅÌÉú
  const [groupId, setGroupId] = useState<number | null>(null)
  const [groupMembers, setGroupMembers] = useState<Array<{ memberId: number; nickname: string; name?: string; email?: string; isLeader?: boolean }>>([])
  const [currentMemberId, setCurrentMemberId] = useState<number | null>(null)
  const size = 10



  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Í∑∏Î£π IDÏôÄ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ID Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchInitialData = async () => {
      try {
        console.log('üîç Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÏûë')
        
        // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ID Í∞ÄÏ†∏Ïò§Í∏∞
        const memberId = await getCurrentMemberId()
        console.log('üîç getCurrentMemberId() Í≤∞Í≥º:', memberId)
        
        setCurrentMemberId(memberId)
        console.log('‚úÖ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ID ÏÑ§Ï†ï ÏôÑÎ£å:', memberId)
        
        // Í∑∏Î£π ID Í∞ÄÏ†∏Ïò§Í∏∞
        const currentGroupId = await getCurrentGroupId()
        console.log('‚úÖ Í∑∏Î£π ID Í∞ÄÏ†∏Ïò§Í∏∞ ÏÑ±Í≥µ:', currentGroupId)
        setGroupId(currentGroupId)
        
        // Í∑∏Î£πÏù¥ ÏóÜÎäî Í≤ΩÏö∞ ÏóêÎü¨Í∞Ä ÏïÑÎãå ÏïàÎÇ¥ Î©îÏãúÏßÄÎ°ú ÏÑ§Ï†ï
        if (!currentGroupId) {
          setError('Í∑∏Î£πÏóê ÏÜçÌï¥ÏûàÏßÄ ÏïäÏäµÎãàÎã§. Í∑∏Î£πÏóê Í∞ÄÏûÖÌïòÍ±∞ÎÇò Í∑∏Î£πÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.')
        } else {
          setError(null)
        }
      } catch (error) {
        console.error('‚ùå Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error)
        setError('Í∑∏Î£π Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï† Ïàò ÏûàÏäµÎãàÎã§.')
        setGroupId(null)
      }
    }
    fetchInitialData()
  }, [])
  
  // Í∑∏Î£π Î∞è Î©§Î≤Ñ Ï†ïÎ≥¥ Î°úÎî©
  useEffect(() => {
    const fetchGroupInfo = async () => {
      if (!groupId) {
        console.log('‚ö†Ô∏è groupIdÍ∞Ä ÏóÜÏñ¥ÏÑú Î©§Î≤Ñ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÏßÄ ÏïäÏäµÎãàÎã§.')
        return
      }
      
      console.log('üîç Í∑∏Î£π Î©§Î≤Ñ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÏûë, groupId:', groupId)
      try {
        const groupInfo = await fetchGroupMembers(groupId)
        console.log('‚úÖ Í∑∏Î£π Î©§Î≤Ñ Ï†ïÎ≥¥ ÏÑ§Ï†ï ÏôÑÎ£å:', groupInfo)
        console.log('‚úÖ Í∑∏Î£π Î©§Î≤Ñ ÏÉÅÏÑ∏ Ï†ïÎ≥¥:', groupInfo.map((member: any) => ({
          id: member.id,
          memberId: member.memberId,
          nickname: member.nickname,
          isLeader: member.isLeader
        })))
        setGroupMembers(groupInfo)
        
        // ÎÇ¥ Í∑∏Î£π Î©§Î≤Ñ Ï†ïÎ≥¥ Ï∞æÍ∏∞ (Í∑∏Î£π Î©§Î≤Ñ Î™©Î°ùÏóêÏÑú)
        if (currentMemberId) {
          const myInfo = groupInfo.find((member: any) => member.memberId === currentMemberId)
          if (myInfo) {
            console.log('‚úÖ ÎÇ¥ Í∑∏Î£π Î©§Î≤Ñ Ï†ïÎ≥¥:', myInfo)
            setMyGroupMemberInfo(myInfo)
            setCurrentNickname(myInfo.nickname || '')
          } else {
            console.log('‚ö†Ô∏è ÎÇ¥ Í∑∏Î£π Î©§Î≤Ñ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå')
          }
        }
      } catch (error) {
        console.error('‚ùå Í∑∏Î£π Î©§Î≤Ñ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error)
        // ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ Îπà Î∞∞Ïó¥Î°ú ÏÑ§Ï†ïÌïòÏó¨ Ïï±Ïù¥ Í≥ÑÏÜç ÏûëÎèôÌïòÎèÑÎ°ù Ìï®
        setGroupMembers([])
      }
    }
    fetchGroupInfo()
  }, [groupId])

  // Í∂åÌïúÏóê Îî∞Îùº ÌÉ≠ ÏûêÎèô ÏÑ§Ï†ï
  useEffect(() => {
    if (!permissions.canCreateAnnouncement && activeTab === 'ANNOUNCEMENT') {
      setActiveTab('FREE')
    }
  }, [permissions.canCreateAnnouncement, activeTab])

  // APIÏóêÏÑú Í≤åÏãúÍ∏Ä Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    if (!groupId) return // groupIdÍ∞Ä ÏóÜÏúºÎ©¥ API Ìò∏Ï∂úÌïòÏßÄ ÏïäÏùå
    
    let mounted = true
    setLoading(true)
    setError(null)

    fetchGroupPosts({ groupId, type: activeTab, status: 'ACTIVE' })
      .then(async (data) => {
        if (mounted) {
          setPageData(data)
          
          // Í∞Å Í≤åÏãúÍ∏ÄÏùò Ï¢ãÏïÑÏöî Ïàò Í∞ÄÏ†∏Ïò§Í∏∞
          const likeCountPromises = data.content.map(async (post) => {
            try {
              const likeCount = await fetchPostLikesCount(post.id)
              return { postId: post.id, count: likeCount.count }
            } catch (error) {
              console.error(`Í≤åÏãúÍ∏Ä ${post.id}Ïùò Ï¢ãÏïÑÏöî Ïàò Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:`, error)
              return { postId: post.id, count: 0 }
            }
          })
          
          const likeCounts = await Promise.all(likeCountPromises)
          const likeCountMap = likeCounts.reduce((acc, { postId, count }) => {
            acc[postId] = count
            return acc
          }, {} as Record<number, number>)
          
          if (mounted) {
            setPostLikeCounts(likeCountMap)
          }
        }
      })
      .catch((e: unknown) => {
        const error = e as { message?: string }
        if (mounted) setError(error?.message ?? 'Failed to load posts')
      })
      .finally(() => mounted && setLoading(false))

    return () => { mounted = false }
  }, [activeTab, currentPage, size, groupId])

  // Í≤åÏãúÍ∏Ä Î™©Î°ù (API Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
  const posts = useMemo(() => pageData?.content ?? [], [pageData])

  // memberIdÎ°ú ÎãâÎÑ§ÏûÑÏùÑ Ï∞æÎäî Ìï®Ïàò
  const getNicknameByMemberId = (memberId: number) => {
    console.log('üîç getNicknameByMemberId Ìò∏Ï∂ú:', {
      memberId,
      groupMembersLength: groupMembers?.length || 0,
      groupMembers: groupMembers
    })
    
    if (!groupMembers || groupMembers.length === 0) {
      console.log('‚ö†Ô∏è groupMembersÍ∞Ä ÏóÜÏùå, Í∏∞Î≥∏Í∞í Î∞òÌôò')
      return 'ÏùµÎ™Ö'
    }
    
    const member = groupMembers.find(m => m.memberId === memberId)
    console.log('üîç Ï∞æÏùÄ Î©§Î≤Ñ:', {
      member,
      memberId,
      found: !!member,
      nickname: member?.nickname,
      nicknameType: typeof member?.nickname,
      nicknameLength: member?.nickname?.length
    })
    
    // nicknameÏù¥ null, undefined, Îπà Î¨∏ÏûêÏó¥Ïù∏ Í≤ΩÏö∞ ÏùµÎ™Ö Î∞òÌôò
    if (!member) {
      console.log('‚ùå Î©§Î≤ÑÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå')
      return 'ÏùµÎ™Ö'
    }
    
    if (!member.nickname || member.nickname.trim() === '') {
      console.log('‚ùå nicknameÏù¥ ÏóÜÍ±∞ÎÇò Îπà Î¨∏ÏûêÏó¥')
      return 'ÏùµÎ™Ö'
    }
    
    const result = member.nickname
    console.log('‚úÖ ÏµúÏ¢Ö Í≤∞Í≥º:', result)
    return result
  }

  
  // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    async function fetchUserProfile() {
      try {
        const profile = await getProfile()
        setUserName(profile.name || '')
      } catch {
        setUserName('')
      }
    }
    fetchUserProfile()
  }, [])

  // Í≤ÄÏÉâ ÌïÑÌÑ∞ÎßÅÎêú Í≤åÏãúÍ∏Ä Î™©Î°ù
  const filteredPosts = useMemo(() => {
    if (!searchTerm.trim()) return posts
    
    const searchLower = searchTerm.toLowerCase()
    return posts.filter(post => {
      // Ï†úÎ™© Í≤ÄÏÉâ
      if (post.title.toLowerCase().includes(searchLower)) return true
      // ÎÇ¥Ïö©(preview) Í≤ÄÏÉâ
      if (post.preview.toLowerCase().includes(searchLower)) return true
      // ÏûëÏÑ±Ïûê Í≤ÄÏÉâ (ÎãâÎÑ§ÏûÑÏúºÎ°ú Í≤ÄÏÉâ)
      const authorName = getNicknameByMemberId(post.memberId)
      if (authorName && authorName.toLowerCase().includes(searchLower)) return true
      return false
    })
  }, [posts, searchTerm, groupMembers])

  // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Í≤åÏãúÍ∏Ä ÏûëÏÑ±ÏûêÏù∏ÏßÄ ÌôïÏù∏ÌïòÎäî Ìï®Ïàò
  const isPostAuthor = (postMemberId: number) => {
    // JWT ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const userFromToken = getCurrentUser()
    const tokenMemberId = userFromToken?.memberId
    const tokenName = userFromToken?.name
    
    // Í≤åÏãúÍ∏Ä ÏûëÏÑ±Ïûê ÎãâÎÑ§ÏûÑ Í∞ÄÏ†∏Ïò§Í∏∞
    const postAuthorNickname = getNicknameByMemberId(postMemberId)

    
    // JWT ÌÜ†ÌÅ∞ÏóêÏÑú Ï∂îÏ∂úÌïú ID ÏÇ¨Ïö© (Ïö∞ÏÑ†ÏàúÏúÑ)
    if (tokenMemberId && tokenMemberId > 0) {
      const isAuthor = tokenMemberId === postMemberId
      return isAuthor
    }
    
    // memberIdÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞, JWTÏùò nameÍ≥º Í≤åÏãúÍ∏Ä ÏûëÏÑ±Ïûê ÎãâÎÑ§ÏûÑ ÎπÑÍµê
    if (tokenName && postAuthorNickname && postAuthorNickname !== 'ÏùµÎ™Ö') {
      const isAuthorByName = tokenName === postAuthorNickname
      return isAuthorByName
    }
    
    // ÎãâÎÑ§ÏûÑÏù¥ 'ÏùµÎ™Ö'ÏúºÎ°ú ÌëúÏãúÎêòÎäî Í≤ΩÏö∞, Í∑∏Î£π Î©§Î≤Ñ Ï†ïÎ≥¥ÏóêÏÑú Ï†ïÌôïÌïú ÎãâÎÑ§ÏûÑ Ï∞æÍ∏∞
    if (tokenName && groupMembers.length > 0) {
      const member = groupMembers.find(m => m.memberId === postMemberId)
      if (member && member.nickname && member.nickname !== 'ÏùµÎ™Ö') {
        const isAuthorByMemberName = tokenName === member.nickname
        return isAuthorByMemberName
      }
    }
    
    // fallback: stateÏùò currentMemberId ÏÇ¨Ïö©
    if (currentMemberId) {
      const isAuthor = currentMemberId === postMemberId
      return isAuthor
    }
    
    console.log('‚ùå ÏÇ¨Ïö©Ïûê IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')
    return false
  }

  // ÌÉ≠ Î≥ÄÍ≤Ω Ìï®Ïàò
  const handleTabChange = (tab: TabKey) => {
    setActiveTab(tab)
    setCurrentPage(1) // ÌÉ≠ Î≥ÄÍ≤Ω Ïãú Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
  }

  // Í≤ÄÏÉâÏñ¥ Î≥ÄÍ≤Ω Ìï®Ïàò
  const handleSearchChange = (value: string) => {
    setSearchTerm(value)
    // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú Í≤ÄÏÉâÏù¥ÎØÄÎ°ú API Ïû¨Ìò∏Ï∂ú Î∂àÌïÑÏöî
  }

  // ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Ìï®Ïàò
  const handlePageChange = (page: number) => {
    setCurrentPage(page)
    window.scrollTo({ top: 0, behavior: 'smooth' })
  }

  // Í≤åÏãúÍ∏Ä ÌÅ¥Î¶≠ Ìï®Ïàò (Î™®Îã¨ Ïó¥Í∏∞ + ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞)
  const handlePostClick = async (post: BoardPost) => {
    setModalLoading(true)
    try {
      const [postDetail, likeCount, likeStatus, likeUsers] = await Promise.all([
        fetchPost(post.id),
        fetchPostLikesCount(post.id),
        fetchPostLikeStatus(post.id),
        getPostLikes(post.id)
      ])
      
      console.log('üìÑ Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï†ïÎ≥¥:', postDetail)
      
      setModalData({ 
        post: postDetail, 
        likeCount: likeCount.count, 
        isLiked: likeStatus.liked,
        likeUsers: likeUsers
      })
      setSelectedPost(postDetail)
      setShowLikeUsers(false)
    } catch (error) {
      console.error('Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error)
    } finally {
      setModalLoading(false)
    }
  }

  // Î™®Îã¨ Îã´Í∏∞ Ìï®Ïàò
  const closeModal = () => {
    setSelectedPost(null)
    setModalData(null)
    setShowLikeUsers(false)
  }

  // Ï¢ãÏïÑÏöî ÌÜ†Í∏Ä Ìï®Ïàò
  const handleLikeToggle = async (postId: number) => {
    try {
      await togglePostLike(postId)
      
      // Ï¢ãÏïÑÏöî ÌÜ†Í∏Ä ÌõÑ Î™®Îã¨ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
      if (selectedPost && selectedPost.id === postId) {
        const [likeCount, likeStatus, likeUsers] = await Promise.all([
          fetchPostLikesCount(postId),
          fetchPostLikeStatus(postId),
          getPostLikes(postId)
        ])
        
        setModalData(prev => prev ? { 
          ...prev, 
          likeCount: likeCount.count,
          isLiked: likeStatus.liked,
          likeUsers: likeUsers
        } : null)
      }
      
      // Î™©Î°ùÏùò Ï¢ãÏïÑÏöî ÏàòÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
      const updatedLikeCount = await fetchPostLikesCount(postId)
      setPostLikeCounts(prev => ({
        ...prev,
        [postId]: updatedLikeCount.count
      }))
    } catch (error) {
      console.error('Ï¢ãÏïÑÏöî ÌÜ†Í∏Ä Ïã§Ìå®:', error)
    }
  }

  // Í≤åÏãúÍ∏Ä ÏàòÏ†ï Î™®Îã¨ Ïó¥Í∏∞
  const openEditModal = () => {
    if (!selectedPost) return
    
    setEditPostTitle(selectedPost.title)
    setEditPostContent(selectedPost.content || selectedPost.preview || '')
    setEditPostCategory(selectedPost.type)
    setEditPostColor(selectedPost.color)
    setShowEditPostModal(true)
  }

  // Í≤åÏãúÍ∏Ä ÏàòÏ†ï Î™®Îã¨ Îã´Í∏∞
  const closeEditModal = () => {
    setShowEditPostModal(false)
    setEditPostTitle('')
    setEditPostContent('')
    setEditPostCategory('FREE')
    setEditPostColor('BLUE')
  }

  // Í≤åÏãúÍ∏Ä ÏàòÏ†ï Ï†úÏ∂ú
  const handleEditPostSubmit = async () => {
    if (!editPostTitle.trim() || !editPostContent.trim() || !selectedPost) {
      alert('Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
      return
    }

    console.log('üöÄ Í≤åÏãúÍ∏Ä ÏàòÏ†ï ÏãúÏûë')
    setIsEditing(true)
    try {
      const updateData = {
        title: editPostTitle,
        content: editPostContent,
        type: editPostCategory,
        color: editPostColor
      }

      console.log('üì§ ÏàòÏ†ïÌï† Îç∞Ïù¥ÌÑ∞:', updateData)

      await updatePost(selectedPost.id, updateData)
      console.log('üì• ÏàòÏ†ï API ÏùëÎãµ ÏôÑÎ£å')
      
      // ÏàòÏ†ï ÌõÑ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      if (groupId) {
        const data = await fetchGroupPosts({ groupId, type: activeTab, status: 'ACTIVE' })
        setPageData(data)
      }
      
      // Î™®Îã¨ Îã´Í∏∞
      closeEditModal()
      closeModal()
      console.log('üîí Î™®Îã¨ Îã´Í∏∞ ÏôÑÎ£å')
    } catch (e: unknown) {
      const error = e as { response?: { status?: number; data?: unknown; headers?: unknown } }
      console.error('‚ùå [updatePost] FAILED', {
        error: e,
        status: error?.response?.status,
        data: error?.response?.data,
        headers: error?.response?.headers
      })
      alert('Í≤åÏãúÍ∏Ä ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
    } finally {
      console.log('üèÅ ÏàòÏ†ï ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å, isEditing:', false)
      setIsEditing(false)
    }
  }

  // ÏÇ≠Ï†ú ÌôïÏù∏ Î™®Îã¨ Ïó¥Í∏∞
  const openDeleteConfirm = (postId: number) => {
    setPendingDeleteId(postId)
    setShowConfirm(true)
  }

  // ÏÇ≠Ï†ú ÌôïÏ†ï Ï≤òÎ¶¨
  const confirmDeletePost = async () => {
    if (pendingDeleteId == null || !groupId) return
    
    try {
      await deletePost(pendingDeleteId)
      
      // ÏÇ≠Ï†ú ÌõÑ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      const data = await fetchGroupPosts({ groupId, type: activeTab, status: 'ACTIVE' })
      setPageData(data)
      
    setShowConfirm(false)
    setPendingDeleteId(null)
    closeModal()
    } catch (error) {
      console.error('Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú Ïã§Ìå®:', error)
      alert('Í≤åÏãúÍ∏Ä ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
    }
  }

  // ÏÇ≠Ï†ú Ï∑®ÏÜå Ï≤òÎ¶¨
  const cancelDeletePost = () => {
    setShowConfirm(false)
    setPendingDeleteId(null)
  }

  // Ï¢ãÏïÑÏöî ÏÇ¨Ïö©Ïûê Î™©Î°ù ÌÜ†Í∏Ä
  const toggleLikeUsers = () => {
    setShowLikeUsers(!showLikeUsers)
  }

  // ÏÉà Í∏Ä ÏûëÏÑ± Î™®Îã¨ Ïó¥Í∏∞
  const openNewPostModal = () => {
    setShowNewPostModal(true)
  }

  // ÏÉà Í∏Ä ÏûëÏÑ± Î™®Îã¨ Îã´Í∏∞
  const closeNewPostModal = () => {
    setShowNewPostModal(false)
    setNewPostTitle('')
    setNewPostContent('')
    setNewPostCategory('FREE')
    setNewPostColor('BLUE')
  }

  // ÏóêÎü¨ Î™®Îã¨ Îã´Í∏∞
  const closeErrorModal = () => {
    setShowErrorModal(false)
    setErrorMessage('')
  }

  // ÎãâÎÑ§ÏûÑ ÏàòÏ†ï Î™®Îã¨ Ïó¥Í∏∞
  const openNicknameModal = () => {
    setShowNicknameModal(true)
  }

  // ÎãâÎÑ§ÏûÑ ÏàòÏ†ï Î™®Îã¨ Îã´Í∏∞
  const closeNicknameModal = () => {
    setShowNicknameModal(false)
  }

  // ÎãâÎÑ§ÏûÑ ÏàòÏ†ï Ï≤òÎ¶¨
  const handleNicknameUpdate = async (newNickname: string) => {
    console.log('üöÄ ÎãâÎÑ§ÏûÑ ÏàòÏ†ï ÏãúÏûë:', {
      newNickname,
      groupId,
      myGroupMemberInfo,
      currentMemberId
    })

    if (!groupId) {
      throw new Error('Í∑∏Î£π IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')
    }

    if (!myGroupMemberInfo) {
      throw new Error('ÎÇ¥ Í∑∏Î£π Î©§Î≤Ñ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')
    }

    setIsUpdatingNickname(true)
    try {
      // ÌòÑÏû¨ Ï†ïÎ≥¥Î•º Î≥µÏÇ¨ÌïòÍ≥† ÎãâÎÑ§ÏûÑÎßå Î≥ÄÍ≤Ω
      const updatedMemberData = {
        ...myGroupMemberInfo,
        nickname: newNickname
      }

      console.log('üì§ API ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:', updatedMemberData)
      console.log('üì° ÏöîÏ≤≠ URL:', `/api/groups/${groupId}/members/me`)

      const response = await updateMyGroupMemberInfo(groupId, updatedMemberData)
      console.log('üì• API ÏùëÎãµ:', response)
      
      // ÏÑ±Í≥µ Ïãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setCurrentNickname(newNickname)
      setMyGroupMemberInfo(updatedMemberData)
      
      // Í∑∏Î£π Î©§Î≤Ñ Î™©Î°ùÎèÑ ÏÉàÎ°úÍ≥†Ïπ®
      const groupInfo = await fetchGroupMembers(groupId)
      setGroupMembers(groupInfo)
      
      console.log('‚úÖ ÎãâÎÑ§ÏûÑ ÏàòÏ†ï ÏôÑÎ£å:', newNickname)
    } catch (error: any) {
      console.error('‚ùå ÎãâÎÑ§ÏûÑ ÏàòÏ†ï Ïã§Ìå®:', {
        error,
        message: error?.message,
        response: error?.response?.data,
        status: error?.response?.status
      })
      
      // Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ ÏóêÎü¨ Î©îÏãúÏßÄ Ï†úÍ≥µ
      let errorMessage = 'ÎãâÎÑ§ÏûÑ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'
      if (error?.response?.data?.message) {
        errorMessage = error.response.data.message
      } else if (error?.message) {
        errorMessage = error.message
      }
      
      throw new Error(errorMessage)
    } finally {
      setIsUpdatingNickname(false)
    }
  }

  // ÏÉà Í∏Ä ÏûëÏÑ± Ï†úÏ∂ú
  const handleNewPostSubmit = async () => {
    if (!newPostTitle.trim() || !newPostContent.trim()) {
      alert('Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
      return
    }

    if (!groupId) {
      alert('Í∑∏Î£π Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.')
      return
    }

    // ÏÇ¨Ïö©Ïûê ID ÎîîÎ≤ÑÍπÖ Î∞è fallback Ï≤òÎ¶¨
    console.log('üîç ÏÇ¨Ïö©Ïûê ID ÌôïÏù∏:', {
      currentMemberId,
      type: typeof currentMemberId,
      fromAuth: getCurrentMemberId(),
      hasToken: !!getAccessToken(),
      tokenValue: getAccessToken() ? getAccessToken()?.substring(0, 20) + '...' : 'NO_TOKEN'
    })

    let memberIdToUse = currentMemberId
    
    if (!memberIdToUse) {
      // JWT ÌÜ†ÌÅ∞ÏóêÏÑú ÏßÅÏ†ë Ï∂îÏ∂ú ÏãúÎèÑ
      const userFromToken = getCurrentUser()
      console.log('üîç JWT ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú ÏãúÎèÑ:', userFromToken)
      
      if (userFromToken?.memberId) {
        memberIdToUse = userFromToken.memberId
        console.log('‚úÖ JWT ÌÜ†ÌÅ∞ÏóêÏÑú memberId Ï∂îÏ∂ú ÏÑ±Í≥µ:', memberIdToUse)
      } else {
        // ÎßàÏßÄÎßâ fallback: ÏûÑÏãú ID ÏÇ¨Ïö© (ÌÖåÏä§Ìä∏Ïö©)
        memberIdToUse = 7
        console.log('‚ö†Ô∏è ÏûÑÏãú memberId ÏÇ¨Ïö© (ÌÖåÏä§Ìä∏Ïö©):', memberIdToUse)
      }
    }

    if (!memberIdToUse) {
      alert('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.')
      return
    }

    console.log('üöÄ ÏÉà Í∏Ä ÏûëÏÑ± ÏãúÏûë')
    setIsSubmitting(true)
    
    console.log(userName)
    
    // API ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ (catch Î∏îÎ°ùÏóêÏÑúÎèÑ Ï†ëÍ∑º Í∞ÄÎä•ÌïòÎèÑÎ°ù try Î∏îÎ°ù Î∞ñÏóê ÏÑ†Ïñ∏)
    const postData = {
      groupId: groupId,
      memberId: memberIdToUse,
      userName: userName,
      type: newPostCategory,
      title: newPostTitle.trim(),
      content: newPostContent.trim(),
      color: newPostColor
    }
    
    try {
      // ÏÉâÏÉÅ Í∞í Í≤ÄÏ¶ù
      const validColors: BoardColor[] = ['RED', 'PURPLE', 'BLUE', 'GREEN', 'ORANGE']
      if (!validColors.includes(newPostColor)) {
        throw new Error(`Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏÉâÏÉÅÏûÖÎãàÎã§: ${newPostColor}`)
      }

      console.log('üì§ Ï†ÑÏÜ°Ìï† Îç∞Ïù¥ÌÑ∞:', postData)
      console.log('üì§ userName Í∞í:', userName)

      console.log('üöÄ API ÏöîÏ≤≠ ÏãúÏûë:', {
        endpoint: 'POST /api/posts',
        data: postData,
        dataStringified: JSON.stringify(postData)
      })

      // API ÏöîÏ≤≠ Ï†Ñ ÏµúÏ¢Ö Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù
      console.log('üîç ÏµúÏ¢Ö Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù:', {
        groupId: typeof groupId === 'number' ? groupId : 'INVALID',
        memberId: typeof memberIdToUse === 'number' ? memberIdToUse : 'INVALID',
        type: newPostCategory,
        title: newPostTitle.trim(),
        content: newPostContent.trim(),
        color: newPostColor,
        colorValid: validColors.includes(newPostColor)
      })

      await createPost(postData)
      console.log('üì• API ÏùëÎãµ ÏôÑÎ£å')
      
      // ÏÉà Í∏Ä ÏûëÏÑ± ÌõÑ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      const data = await fetchGroupPosts({ groupId, type: activeTab, status: 'ACTIVE' })
      setPageData(data)
      setCurrentPage(1)
      
      closeNewPostModal()
      console.log('üîí Î™®Îã¨ Îã´Í∏∞ ÏôÑÎ£å')
    } catch (e: unknown) {
      const error = e as { 
        response?: { 
          status?: number; 
          statusText?: string; 
          data?: { 
            message?: string; 
            error?: string; 
            detail?: string; 
            errors?: Record<string, string | string[]> 
          }; 
          headers?: unknown 
        }; 
        config?: unknown; 
        message?: string 
      }
      console.error('‚ùå [createPost] FAILED', {
        error: e,
        status: error?.response?.status,
        statusText: error?.response?.statusText,
        data: error?.response?.data,
        headers: error?.response?.headers,
        config: error?.config,
        message: error?.message
      })
      
      // API ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
      let errorMessage = 'Í≤åÏãúÍ∏Ä ÏûëÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'
      if (error?.response?.data?.message) {
        errorMessage = `Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®: ${error.response.data.message}`
      } else if (error?.response?.data?.error) {
        errorMessage = `Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®: ${error.response.data.error}`
      } else if (error?.response?.data?.detail) {
        errorMessage = `Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®: ${error.response.data.detail}`
      } else if (error?.response?.data?.errors) {
        // ÌïÑÎìúÎ≥Ñ Ïò§Î•ò Î©îÏãúÏßÄÍ∞Ä ÏûàÎäî Í≤ΩÏö∞
        const fieldErrors = Object.entries(error.response.data.errors || {})
          .map(([field, messages]) => `${field}: ${Array.isArray(messages) ? messages.join(', ') : messages}`)
          .join('; ')
        errorMessage = `Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®: ${fieldErrors}`
      } else if (error?.message) {
        errorMessage = `Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®: ${error.message}`
      }
      
      console.error('üö® ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÌëúÏãúÌï† ÏóêÎü¨ Î©îÏãúÏßÄ:', errorMessage)
      setErrorMessage(errorMessage)
      setShowErrorModal(true)
    } finally {
      console.log('üèÅ ÏûëÏÑ± ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å, isSubmitting:', false)
      setIsSubmitting(false)
    }
  }

  // ÏÉâÏÉÅ ÏΩîÎìúÎ•º CSS ÌÅ¥ÎûòÏä§Î°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
  const getColorClass = (color: BoardColor): string => {
    const colorMap: Record<BoardColor, string> = {
      RED: 'border-red-300 bg-red-100',
      BLUE: 'border-blue-300 bg-blue-100',
      GREEN: 'border-green-300 bg-green-100',
      PURPLE: 'border-purple-300 bg-purple-100',
      ORANGE: 'border-orange-300 bg-orange-100'
    }
    return colorMap[color]
  }

  // ÏÇ¨Ïö©Ïûê Ïù¥ÎãàÏÖú ÏÉùÏÑ± Ìï®Ïàò
  const getUserInitial = (name: string) => {
    return name.charAt(0)
  }

  // ÏÇ¨Ïö©Ïûê ÏïÑÎ∞îÌÉÄ ÏÉâÏÉÅ ÏÉùÏÑ± Ìï®Ïàò
  const getUserAvatarColor = (name: string) => {
    const colors = [
      'bg-blue-500',
      'bg-red-500', 
      'bg-green-500',
      'bg-purple-500',
      'bg-pink-500',
      'bg-indigo-500',
      'bg-teal-500'
    ]
    const index = name.charCodeAt(0) % colors.length
    return colors[index]
  }

  return (
    <div className="container mx-auto px-3 sm:px-4 py-6 sm:py-8">
      {/* Ìó§Îçî */}
      <div className="flex flex-col gap-3 sm:gap-4 mb-4 sm:mb-6 animate-slide-in">
        <div className="flex justify-between items-start gap-3">
          <h1 className="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent">Í≤åÏãúÌåê</h1>
          <div className="flex gap-2">
            <button
              onClick={openNicknameModal}
              className="btn btn-outline btn-sm rounded-lg transition-all duration-200 hover:scale-105 hover:shadow-lg"
              title="ÎãâÎÑ§ÏûÑ ÏàòÏ†ï"
            >
              <User className="w-4 h-4" />
              ÎãâÎÑ§ÏûÑ ÏàòÏ†ï
            </button>
            <button
              onClick={openNewPostModal}
              className="btn btn-primary btn-sm rounded-lg transition-all duration-200 hover:scale-105 hover:shadow-lg"
            >
              ÏÉà Í∏Ä ÏûëÏÑ±
            </button>
          </div>
        </div>
        
        {/* Í≤ÄÏÉâÏ∞Ω */}
        <div className="flex gap-2">
          <div className="flex-1 relative">
            <input
              type="text"
              placeholder="Ï†úÎ™©Ïù¥ÎÇò ÎÇ¥Ïö©ÏúºÎ°ú Í≤ÄÏÉâ..."
              className="input input-bordered rounded-lg w-full focus:input-primary transition-all duration-200 focus:scale-[1.01] focus:shadow-md"
              value={searchTerm}
              onChange={(e) => handleSearchChange(e.target.value)}
            />
            {searchTerm && (
              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                <div className="w-2 h-2 bg-primary rounded-full animate-pulse-subtle"></div>
              </div>
            )}
          </div>
          {searchTerm && (
            <button
              onClick={() => handleSearchChange('')}
              className="btn btn-ghost rounded-lg transition-all duration-200 hover:scale-105 animate-slide-in"
            >
              Ï¥àÍ∏∞Ìôî
            </button>
          )}
        </div>
      </div>

      {/* ÌÉ≠ */}
      <div className="tabs tabs-boxed mb-6 animate-slide-in" style={{ animationDelay: '100ms' }}>
        {permissions.canCreateAnnouncement && (
          <button
            className={`tab transition-all duration-200 ${activeTab === 'ANNOUNCEMENT' ? 'tab-active' : 'hover:bg-base-200'}`}
            onClick={() => handleTabChange('ANNOUNCEMENT')}
          >
            Í≥µÏßÄÏÇ¨Ìï≠
          </button>
        )}
        <button
          className={`tab transition-all duration-200 ${activeTab === 'FREE' ? 'tab-active' : 'hover:bg-base-200'}`}
          onClick={() => handleTabChange('FREE')}
        >
          ÏûêÏú†Í≤åÏãúÌåê
        </button>
      </div>

      {/* Í≤åÏãúÍ∏Ä Î™©Î°ù */}
      <div className="w-full">
        {loading && (
          <div className="text-center py-8">
            <div className="loading loading-spinner loading-lg"></div>
            <p className="mt-4 text-gray-500">Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
          </div>
        )}

        {error && (
          <div className="text-center py-8">
            {error.includes('Í∑∏Î£πÏóê ÏÜçÌï¥ÏûàÏßÄ ÏïäÏäµÎãàÎã§') ? (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 text-center">
                <h3 className="text-lg font-semibold text-blue-800 mb-2">Í∑∏Î£πÏù¥ ÌïÑÏöîÌï©ÎãàÎã§</h3>
                <p className="text-blue-600 mb-4">{error}</p>
                <div className="space-y-2">
                  <p className="text-sm text-blue-500">Í∑∏Î£πÏùÑ ÏÉùÏÑ±ÌïòÍ±∞ÎÇò Ï¥àÎåÄ ÏΩîÎìúÎ°ú Í∞ÄÏûÖÌï† Ïàò ÏûàÏäµÎãàÎã§.</p>
                  <p className="text-sm text-blue-500">Í∑∏Î£πÏóê Í∞ÄÏûÖÌïòÎ©¥ Í≤åÏãúÍ∏ÄÏùÑ ÏûëÏÑ±ÌïòÍ≥† Î≥º Ïàò ÏûàÏñ¥Ïöî!</p>
                </div>
              </div>
            ) : (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-center">
                <h3 className="text-lg font-semibold text-red-800 mb-2">Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</h3>
                <p className="text-red-600">{error}</p>
              </div>
            )}
          </div>
        )}

        {!loading && !error && filteredPosts.length === 0 && (
          <div className="text-center py-8">
            <p className="text-lg text-gray-500">
              {searchTerm ? `"${searchTerm}"Ïóê ÎåÄÌïú Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.` : 'Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.'}
            </p>
            {searchTerm && (
              <p className="text-sm text-gray-400 mt-2">
                Ï†úÎ™©, ÎÇ¥Ïö©, ÏûëÏÑ±ÏûêÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî.
              </p>
            )}
          </div>
        )}

        {!loading && !error && filteredPosts.length > 0 && (
          <>
        {/* Î∞òÏùëÌòï Í∑∏Î¶¨Îìú: Î™®Î∞îÏùº 2Ïó¥, Ïõπ 3Ïó¥ */}
        <div className="grid grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
              {filteredPosts.map((post, index) => {
            return (
              <div
                key={post.id}
                    className={`card cursor-pointer group transition-all duration-300 ease-out hover:shadow-xl hover:-translate-y-1 hover:scale-[1.02] ${getColorClass(post.color)} opacity-0 animate-fade-in-up`}
                style={{ animationDelay: `${index * 50}ms` }}
                onClick={() => handlePostClick(post)}
              >
                <div className="card-body p-3 sm:p-4">
                  {/* Title */}
                  <h3 className="card-title text-sm font-bold line-clamp-2 mb-2">
                    {post.title}
                  </h3>

                  {/* Content preview */}
                  <p className="text-xs text-base-content/70 line-clamp-3 mb-3">
                        {post.preview}
                  </p>

                  {/* Meta info */}
                  <div className="flex justify-between items-center text-xs text-base-content/60">
                        <span>{getNicknameByMemberId(post.memberId)}</span>
                        <span>{new Date(post.createdAt).toISOString().split('T')[0]}</span>
                  </div>

                  {/* Stats */}
                  <div className="flex items-center justify-end text-xs opacity-60">
                    <div className="flex items-center gap-1">
                      <Heart className="w-3 h-3" />
                      <span>{postLikeCounts[post.id] || 0}</span>
                    </div>
                  </div>

                  {/* Hover effect */}
                  <div className="absolute inset-0 bg-black opacity-0 group-hover:opacity-10 rounded-lg transition-opacity duration-200"></div>
                </div>
              </div>
            )
          })}
        </div>
          </>
        )}
      </div>

      {/* Pagination */}
      {!loading && !error && pageData && pageData.totalPages > 1 && (
        <div className="flex justify-center mt-8 animate-fade-in-up" style={{ animationDelay: '200ms' }}>
          <div className="join shadow-lg">
            <button
              className="join-item btn btn-sm rounded-tl-lg rounded-bl-lg transition-all duration-200 hover:scale-105"
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
            >
              ¬´
            </button>
            {Array.from({ length: pageData.totalPages }, (_, i) => i + 1).map((page) => (
              <button
                key={page}
                className={`join-item btn btn-sm transition-all duration-200 hover:scale-105 ${currentPage === page ? 'btn-active' : ''}`}
                onClick={() => handlePageChange(page)}
              >
                {page}
              </button>
            ))}
            <button
              className="join-item btn btn-sm rounded-tr-lg rounded-br-lg transition-all duration-200 hover:scale-105"
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage >= pageData.totalPages}
            >
              ¬ª
            </button>
          </div>
        </div>
      )}

      {/* Post Detail Modal */}
      {selectedPost && (
        <div className="modal modal-open">
          <div className={`modal-box rounded-lg max-w-2xl max-h-[90vh] overflow-y-auto ${getColorClass(selectedPost.color)} border-2 animate-fade-in-up shadow-2xl`}>
            {modalLoading ? (
              <div className="text-center py-8">
                <div className="loading loading-spinner loading-lg"></div>
                <p className="mt-4 text-gray-500">Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
              </div>
            ) : (
              <>
            <div className="flex justify-between items-start mb-4">
              <h3 className="font-bold text-xl text-gray-800">{selectedPost.title}</h3>
              <div className="flex items-center gap-2">
                {/* ÏàòÏ†ï/ÏÇ≠Ï†ú Î≤ÑÌäº (ÏûëÏÑ±ÏûêÎßå ÌëúÏãú) */}
                {(() => {
                  const isAuthor = isPostAuthor(selectedPost.memberId)
                  return isAuthor
                })() && (
                  <>
                    <button
                      className="btn btn-sm btn-circle btn-ghost hover:bg-blue-100"
                      onClick={(e) => {
                        e.stopPropagation()
                        openEditModal()
                      }}
                      title="ÏàòÏ†ï"
                    >
                      <Edit className="w-4 h-4 text-blue-600" />
                    </button>
                    <button
                      className="btn btn-sm btn-circle btn-ghost hover:bg-red-100"
                      onClick={(e) => {
                        e.stopPropagation()
                        openDeleteConfirm(selectedPost.id)
                      }}
                      title="ÏÇ≠Ï†ú"
                    >
                      <Trash2 className="w-4 h-4 text-red-600" />
                    </button>
                  </>
                )}
                <button
                  className="btn btn-sm btn-circle btn-ghost hover:bg-black/10"
                  onClick={closeModal}
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>

            <div className="space-y-4">
              
              
                {/* Meta info */}
                <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                    <span>ÏûëÏÑ±Ïûê: {getNicknameByMemberId(selectedPost.memberId)} </span>
                    <span>ÏûëÏÑ±Ïùº: {new Date(selectedPost.createdAt).toISOString().split('T')[0]}</span>
                    <span>Ïπ¥ÌÖåÍ≥†Î¶¨: {selectedPost.type === 'ANNOUNCEMENT' ? 'Í≥µÏßÄÏÇ¨Ìï≠' : 'ÏûêÏú†Í≤åÏãúÌåê'}</span>
              </div>

              {/* Content */}
              <div className="prose max-w-none">
                <p className="whitespace-pre-wrap leading-relaxed text-gray-700">
                      {selectedPost.content || selectedPost.preview}
                </p>
              </div>

              {/* Stats */}
              <div className="flex items-center gap-6 pt-4 border-t">
                <div className="flex items-center gap-2">
                  <button
                    onClick={(e) => {
                      e.stopPropagation()
                      handleLikeToggle(selectedPost.id)
                    }}
                    className="btn btn-ghost btn-sm p-2"
                  >
                    <Heart 
                      className={`w-5 h-5 transition-all duration-200 ${
                        modalData?.isLiked 
                          ? 'fill-red-500 text-red-500' 
                          : 'text-gray-400 hover:text-red-400'
                      }`} 
                    />
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation()
                      toggleLikeUsers()
                    }}
                    className="flex items-center gap-1 hover:text-primary"
                  >
                    <span className="font-semibold">{modalData?.likeCount || 0}</span>
                    {showLikeUsers ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
                  </button>
                </div>
              </div>

              {/* Like Users Dropdown */}
              {showLikeUsers && (modalData?.likeCount || 0) > 0 && modalData?.likeUsers && (
                <div className="border-t pt-4">
                  <h4 className="font-semibold mb-3">Ï¢ãÏïÑÏöîÎ•º ÎàÑÎ•∏ ÏÇ¨Ïö©Ïûê</h4>
                  <div className="space-y-2 max-h-40 overflow-y-auto">
                    {modalData.likeUsers.likers.map((liker) => (
                      <div key={liker.memberId} className="flex items-center gap-3 p-2 rounded-lg">
                        <div className="avatar">
                          <div className={`w-8 h-8 rounded-full ${getUserAvatarColor(liker.displayName)} flex items-center justify-center text-white text-sm font-semibold`}>
                            {getUserInitial(liker.displayName)}
                          </div>
                        </div>
                        <span className="font-medium">{liker.displayName}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <div className="modal-action">
              <button 
                className="btn btn-sm rounded-lg"
                style={{ backgroundColor: '#000000', color: 'white', border: 'none' }}
                onClick={closeModal}
              >
                Îã´Í∏∞
              </button>
            </div>
              </>
            )}
          </div>
          <div className="modal-backdrop" onClick={closeModal}></div>
        </div>
      )}

      {/* Edit Post Modal */}
      {showEditPostModal && (
        <div className="modal modal-open">
          <div className="modal-box rounded-lg max-w-2xl animate-fade-in-up shadow-2xl border-2 border-gray-200">
            <div className="flex justify-between items-start mb-6">
              <h3 className="font-bold text-xl">Í≤åÏãúÍ∏Ä ÏàòÏ†ï</h3>
              <button
                className="btn btn-sm btn-circle btn-ghost"
                onClick={closeEditModal}
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="space-y-4">
              {/* Title Input */}
              <div className="form-control w-full">
                <label className="label">
                  <span className="label-text font-medium">Ï†úÎ™©</span>
                </label>
                <input
                  type="text"
                  placeholder="Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  className="input input-bordered rounded-lg focus:input-primary"
                  value={editPostTitle}
                  onChange={(e) => setEditPostTitle(e.target.value)}
                />
              </div>

              {/* Content Input */}
              <div className="form-control w-full">
                <label className="label">
                  <span className="label-text font-medium">ÎÇ¥Ïö©</span>
                </label>
                <textarea
                  placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  className="textarea textarea-bordered rounded-lg focus:textarea-primary h-32"
                  value={editPostContent}
                  onChange={(e) => setEditPostContent(e.target.value)}
                />
              </div>

              {/* Category Select */}
              <div className="form-control w-full">
                <label className="label">
                  <span className="label-text font-medium">Ïπ¥ÌÖåÍ≥†Î¶¨</span>
                </label>
                <select
                  className="select select-bordered rounded-lg focus:select-primary w-full"
                  value={editPostCategory}
                  onChange={(e) => setEditPostCategory(e.target.value as 'ANNOUNCEMENT' | 'FREE')}
                >
                  <option value="FREE">ÏûêÏú†Í≤åÏãúÌåê</option>
                  <option value="ANNOUNCEMENT">Í≥µÏßÄÏÇ¨Ìï≠</option>
                </select>
              </div>

              {/* Color Select */}
              <div className="form-control w-full">
                <label className="label">
                  <span className="label-text font-medium">ÏÉâÏÉÅ</span>
                </label>
                <select
                  className="select select-bordered rounded-lg focus:select-primary w-full"
                  value={editPostColor}
                  onChange={(e) => setEditPostColor(e.target.value as BoardColor)}
                >
                  <option value="BLUE">ÌååÎûÄÏÉâ</option>
                  <option value="RED">Îπ®Í∞ÑÏÉâ</option>
                  <option value="PURPLE">Î≥¥ÎùºÏÉâ</option>
                  <option value="GREEN">Ï¥àÎ°ùÏÉâ</option>
                  <option value="ORANGE">Ïò§Î†åÏßÄÏÉâ</option>
                </select>
              </div>
            </div>

            <div className="modal-action">
              <button className="btn btn-ghost btn-sm rounded-lg" onClick={closeEditModal}>
                Ï∑®ÏÜå
              </button>
              <button className="btn btn-primary btn-sm rounded-lg" onClick={handleEditPostSubmit} disabled={isEditing}>
                {isEditing ? 'ÏàòÏ†ï Ï§ë...' : 'ÏàòÏ†ï ÏôÑÎ£å'}
              </button>
            </div>
          </div>
          <div className="modal-backdrop" onClick={closeEditModal}></div>
        </div>
      )}

      {/* New Post Modal */}
      {showNewPostModal && (
        <div className="modal modal-open">
          <div className="modal-box rounded-lg max-w-2xl animate-fade-in-up shadow-2xl border-2 border-gray-200">
            <div className="flex justify-between items-start mb-6">
              <h3 className="font-bold text-xl">ÏÉà Í∏Ä ÏûëÏÑ±</h3>
              <button
                className="btn btn-sm btn-circle btn-ghost"
                onClick={closeNewPostModal}
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="space-y-4">
              {/* Title Input */}
              <div className="form-control w-full">
                <label className="label">
                  <span className="label-text font-medium">Ï†úÎ™©</span>
                </label>
                <input
                  type="text"
                  placeholder="Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  className="input input-bordered rounded-lg focus:input-primary"
                  value={newPostTitle}
                  onChange={(e) => setNewPostTitle(e.target.value)}
                />
              </div>

              {/* Content Input */}
              <div className="form-control w-full">
                <label className="label">
                  <span className="label-text font-medium">ÎÇ¥Ïö©</span>
                </label>
                <textarea
                  placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  className="textarea textarea-bordered rounded-lg focus:textarea-primary h-32"
                  value={newPostContent}
                  onChange={(e) => setNewPostContent(e.target.value)}
                />
              </div>

              {/* Category Select */}
              <div className="form-control w-full">
                <label className="label">
                  <span className="label-text font-medium">Ïπ¥ÌÖåÍ≥†Î¶¨</span>
                </label>
                <select
                  className="select select-bordered rounded-lg focus:select-primary w-full"
                  value={newPostCategory}
                  onChange={(e) => setNewPostCategory(e.target.value as 'ANNOUNCEMENT' | 'FREE')}
                >
                  <option value="FREE">ÏûêÏú†Í≤åÏãúÌåê</option>
                  <option value="ANNOUNCEMENT">Í≥µÏßÄÏÇ¨Ìï≠</option>
                </select>
              </div>

              {/* Color Select */}
              <div className="form-control w-full">
                <label className="label">
                  <span className="label-text font-medium">ÏÉâÏÉÅ</span>
                </label>
                <select
                  className="select select-bordered rounded-lg focus:select-primary w-full"
                  value={newPostColor}
                  onChange={(e) => setNewPostColor(e.target.value as BoardColor)}
                >
                  <option value="BLUE">ÌååÎûÄÏÉâ</option>
                  <option value="RED">Îπ®Í∞ÑÏÉâ</option>
                  <option value="PURPLE">Î≥¥ÎùºÏÉâ</option>
                  <option value="GREEN">Ï¥àÎ°ùÏÉâ</option>
                  <option value="ORANGE">Ïò§Î†åÏßÄÏÉâ</option>
                </select>
              </div>
            </div>

            <div className="modal-action">
              <button className="btn btn-ghost btn-sm rounded-lg" onClick={closeNewPostModal}>
                Ï∑®ÏÜå
              </button>
              <button className="btn btn-primary btn-sm rounded-lg" onClick={handleNewPostSubmit} disabled={isSubmitting}>
                {isSubmitting ? 'ÏûëÏÑ± Ï§ë...' : 'ÏôÑÎ£å'}
              </button>
            </div>
          </div>
          <div className="modal-backdrop" onClick={closeNewPostModal}></div>
        </div>
      )}

      {/* Confirm Delete Modal */}
      <ConfirmModal
        open={showConfirm}
        title="ÏÇ≠Ï†ú ÌôïÏù∏"
        message="Ï†ïÎßê Ïù¥ Í≤åÏãúÍ∏ÄÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?"
        confirmText="ÏÇ≠Ï†ú"
        cancelText="Ï∑®ÏÜå"
        onConfirm={confirmDeletePost}
        onCancel={cancelDeletePost}
      />

      {/* Error Modal */}
      {showErrorModal && (
        <div className="modal modal-open">
          <div className="modal-box rounded-lg max-w-md animate-fade-in-up shadow-2xl border-2 border-red-200">
            <div className="flex justify-between items-start mb-4">
              <h3 className="font-bold text-lg text-red-800">Ïò§Î•ò Î∞úÏÉù</h3>
              <button
                className="btn btn-sm btn-circle btn-ghost"
                onClick={closeErrorModal}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <div className="mb-6">
              <p className="text-gray-700 whitespace-pre-wrap">{errorMessage}</p>
            </div>

            <div className="modal-action">
              <button 
                className="btn btn-primary btn-sm rounded-lg"
                onClick={closeErrorModal}
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
          <div className="modal-backdrop" onClick={closeErrorModal}></div>
        </div>
      )}

      {/* Nickname Edit Modal */}
      <NicknameEditModal
        isOpen={showNicknameModal}
        onClose={closeNicknameModal}
        currentNickname={currentNickname}
        onSave={handleNicknameUpdate}
        isLoading={isUpdatingNickname}
      />
    </div>
  )
}
